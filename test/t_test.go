package test

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/dollarkillerx/Dictate-words/pkg/models"
	"github.com/dollarkillerx/urllib"
	"io"
	"log"
	"net/http"
	"os"
	"testing"
)

func TestM2(t *testing.T) {
	//start, err := ioutil.ReadFile("../stats/start.mp3")
	//if err != nil {
	//	log.Fatalln(err)
	//}
	//
	//ting, err := ioutil.ReadFile("../stats/ting.mp3")
	//if err != nil {
	//	log.Fatalln(err)
	//}

	os.Getenv("")

	var resp models.TtsResp
	err := urllib.Post("http://tts_api.mechat.live/google_tts").SetJsonObject(models.TtsModel{
		Text: "警告",
		Lang: "ja",
	}).FromJsonByCode(&resp, 200)
	if err != nil {
		log.Fatalln(err)
	}

	code, bt, err := urllib.Get(resp.Url).RandDisguisedIP().RandUserAgent().ByteOriginal()
	if err != nil {
		log.Fatalln(err)
	}

	if code != 200 {
		log.Fatalln(string(bt))
	}

	create, err := os.Create("xxx.mp3")
	if err != nil {
		log.Fatalln(err)
	}
	defer create.Close()
	create.Write(bt)

}

func TestPb(t *testing.T) {
	url := "https://readspeaker.jp/voicedemo/vd_ajax.php"

	i, bytes, err := urllib.Post(url).RandUserAgent().RandDisguisedIP().ParamsMap(map[string]string{
		"action": "submit",
		"lang":   "Risa (女性)",
		"text":   "ゆっくり　言ってください",
		"speed":  "90",
		"volume": "100",
		"pitch":  "100",
		"format": "mp3",
	}).Byte()
	fmt.Println(i)
	fmt.Println(err)
	fmt.Println(string(bytes))
	//os.WriteFile("a.mp3", bytes, 00666)
}

func TestPb2(t *testing.T) {
	url := "https://readspeaker.jp/voicedemo/vd_ajax.php"
	method := "POST"

	payload := bytes.NewBufferString("action=submit&lang=%E6%97%A5%E6%9C%AC%E8%AA%9E&voice=Risa+(%E5%A5%B3%E6%80%A7)&text=" + "ゆっくり　言ってください" + "&speed=90&volume=100&pitch=100&format=mp3")

	client := &http.Client{}
	req, err := http.NewRequest(method, url, payload)

	if err != nil {
		fmt.Println(err)
		return
	}

	req.Header.Add("authority", "readspeaker.jp")
	req.Header.Add("accept", "*/*")
	req.Header.Add("accept-language", "ja,zh-CN;q=0.9,zh;q=0.8,en;q=0.7")
	req.Header.Add("cache-control", "no-cache")
	req.Header.Add("content-type", "application/x-www-form-urlencoded; charset=UTF-8")
	req.Header.Add("origin", "https://readspeaker.jp")
	req.Header.Add("pragma", "no-cache")
	req.Header.Add("referer", "https://readspeaker.jp/voicedemo/index.html")
	req.Header.Add("sec-ch-ua", `"Google Chrome";v="111", "Not(A:Brand";v="8", "Chromium";v="111"`)
	req.Header.Add("sec-ch-ua-mobile", "?0")
	req.Header.Add("sec-ch-ua-platform", `"macOS"`)
	req.Header.Add("sec-fetch-dest", "empty")
	req.Header.Add("sec-fetch-mode", "cors")
	req.Header.Add("sec-fetch-site", "same-origin")
	req.Header.Add("user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36")
	req.Header.Add("x-requested-with", "XMLHttpRequest")

	res, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer res.Body.Close()

	all, err := io.ReadAll(res.Body)
	if err == nil {
		fmt.Println(string(all))
	}

	fmt.Println(res.StatusCode)

	//jsonString := "{\"links\":{\"mp3\":\"https:\\/\\/media-jp.readspeaker.com\\/cache\\/3a37e7a2c539.mp3\",\"ogg\":\"\",\"flv\":\"\"}}"

	type AutoGenerated struct {
		Links struct {
			Mp3 string `json:"mp3"`
			Ogg string `json:"ogg"`
			Flv string `json:"flv"`
		} `json:"links"`
	}

	var au = AutoGenerated{}

	all = bytes.ReplaceAll(all, []byte("\\"), []byte(""))
	all = all[1 : len(all)-1]
	fmt.Println(string(all))

	err = json.Unmarshal(all, &au)
	if err != nil {
		panic(err)
	}

	fmt.Println(au)

}
